try {
	eval("(()=>{'use strict';if(!window.customElements)return;const NativeHTMLElement=window.HTMLElement;const nativeDefine=window.customElements.define;const nativeGet=window.customElements.get;const tagnameByConstructor=new Map();const constructorByTagname=new Map();let browserConstruction=!1;let userConstruction=!1;window.HTMLElement=function(){if(!browserConstruction){const tagname=tagnameByConstructor.get(this.constructor);const fakeClass=nativeGet.call(window.customElements,tagname);userConstruction=!0;const instance=new(fakeClass)();return instance}browserConstruction=!1};window.HTMLElement.prototype=NativeHTMLElement.prototype;window.customElements.define=(tagname,elementClass)=>{const elementProto=elementClass.prototype;const StandInElement=class extends NativeHTMLElement{constructor(){super();Object.setPrototypeOf(this,elementProto);if(!userConstruction){browserConstruction=!0;elementClass.call(this)}userConstruction=!1}};const standInProto=StandInElement.prototype;StandInElement.observedAttributes=elementClass.observedAttributes;standInProto.connectedCallback=elementProto.connectedCallback;standInProto.disconnectedCallback=elementProto.disconnectedCallback;standInProto.attributeChangedCallback=elementProto.attributeChangedCallback;standInProto.adoptedCallback=elementProto.adoptedCallback;tagnameByConstructor.set(elementClass,tagname);constructorByTagname.set(tagname,elementClass);nativeDefine.call(window.customElements,tagname,StandInElement)};window.customElements.get=(tagname)=>constructorByTagname.get(tagname)})()");
}catch(e) {}